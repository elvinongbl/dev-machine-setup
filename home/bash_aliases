# ========================================================= #
# A bunch of environment start-up
# ========================================================= #

##################
# ssh-agent
#
# Start ssh-agent if not already started
ssh_on=$(ls /tmp | grep ssh | wc -l)
if [ x"$ssh_on" != x1 ]; then
  eval $(ssh-agent -s)
  ssh-add ~/.ssh/id_rsa
  ssh-add ~/.ssh/id_rsa_gmail
fi

################
# shell - git branch display
# refer to ~/.bashrc for the original PS1 setting
PS1='\[\033[01;32m\]\u\[\033[00m\]@\[\033[01;32m\]\h\[\033[00m\]:\[\033[01;32m\]\W\[\033[00m\]$(__git_ps1 " (%s)") \$ '

# ========================================================= #
# A bunch of command short-cut
# ========================================================= #

# A bunch of command aliases
alias rebashrc='source ~/.bashrc'

# General command line editting
alias vv='vim.nox'
alias ngrep="grep -rn"

# Yocto Project
alias bb='bitbake'

# Common quick command for string parsing

# ========================================================= #
# A bunch of specialized bash functions
# ========================================================= #


################
# Display system information
#
function osystem_show () {
    tmpfile=~/.tmpcpuinfo
    echo "=========================================="
    cat /etc/lsb-release
    echo "=========================================="
    cat /proc/cpuinfo > $tmpfile
    model_name=$(cat $tmpfile | grep "model name" -m 1)
    processor_count=$(cat $tmpfile | grep "processor" -c)
    cache_size=$(cat $tmpfile | grep "cache size" -m 1)
    cpu_mhz=$(cat $tmpfile | grep "cpu MHz")
    echo -e "CPU information :- \
       \n${model_name} \
       \nprocessor count : ${processor_count} \
       \n${cache_size} \
       \n${cpu_mhz} \
    "
   rm $tmpfile
}

function osystem_cpukhz_runtime () {
    # print CPU khz run-time on current terminal
    # i7z understands i3, i5 & i7 CPU
    sudo i7z
}

################
# Display tput support colors
#
function tput_colors () {
    for fg_color in {0..7}; do
        set_foreground=$(tput setaf $fg_color)
        for bg_color in {0..7}; do
            set_background=$(tput setab $bg_color)
            echo -n $set_background$set_foreground
            printf ' F:%s B:%s ' $fg_color $bg_color
        done
        echo $(tput sgr0)
    done
}

################
# Linux kernel development
#
function ksetup_config () {
    # Copy config of current Linux version from /boot to cwd
    echo "Linux kernel: setup .config from /boot for version=$(uname -r)"
    cp /boot/config-`uname -r`* .config
    # Silently update new configuration values to their default
    make olddefconfig
    echo -e "Next step: \
    \n make menuconfig     - continue to change .config \
    \n make localmodconfig - use local kernel module only \
    "
}

function kinstall_local () {
    # For Ubuntu system, it provides /sbin/installkernel
    # to install kernel to /boot, modules to /lib/modules/X.Y.Z
    # and updates /boot/grub/grub.conf
    sudo make modules_install install
}

################
# Grub2 development
#
function kgrub_show() {
    echo -e "$ sudo cat /etc/default/grub"
    sudo cat /etc/default/grub
}

# Change grub boot config to menu and verbose
function kgrub_verbose () {
    grubfile=/etc/default/grub
    tmpfile1=~/.tmp_grub1
    tmpfile2=~/.tmp_grub2
    echo -e "Set GRUB_TIMEOUT_STYLE=menu TIMEOUT=10"
    sed -e "s#GRUB_TIMEOUT_STYLE=hidden#GRUB_TIMEOUT_STYLE=menu#g" \
        $grubfile > $tmpfile1
    sed -e "s#GRUB_TIMEOUT=0#GRUB_TIMEOUT=10#g" \
        $tmpfile1 > $tmpfile2
    sed -e 's#CMDLINE_LINUX_DEFAULT="quiet splash"#CMDLINE_LINUX_DEFAULT="debug loglevel=7"#g' \
        $tmpfile2 > $tmpfile1
    sudo cp $tmpfile1 $grubfile
    sudo update-grub2
    rm $tmpfile1 $tmpfile2
}

# Change grub boot config to hidden and quiet
function kgrub_hidden () {
    grubfile=/etc/default/grub
    tmpfile1=~/.tmp_grub1
    tmpfile2=~/.tmp_grub2
    echo -e "Set GRUB_TIMEOUT_STYLE=hidden TIMEOUT=0"
    sed -e "s#GRUB_TIMEOUT_STYLE=menu#GRUB_TIMEOUT_STYLE=hidden#g" \
        $grubfile > $tmpfile1
    sed -e "s#GRUB_TIMEOUT=10#GRUB_TIMEOUT=0#g" \
        $tmpfile1 > $tmpfile2
    sed -e 's#CMDLINE_LINUX_DEFAULT="debug loglevel=7"#CMDLINE_LINUX_DEFAULT="quiet splash"#g' \
        $tmpfile2 > $tmpfile1
    sudo cp $tmpfile1 $grubfile
    sudo update-grub2
    rm $tmpfile1 $tmpfile2
}

################
# git send-email with get_maintainer.pl
# bsendpatch 0001-something.patch -cc anyone@else.com
#
function cocci_cc () {
    shopt -s extglob
    cd $(git rev-parse --show-toplevel) > /dev/null

    name=${1##*/}
    num=${name%%-*}

    if [ "$num" = "0000" ]; then
        dir=${1%/*}
        for f in $dir/!0000-*.patch; do
            scripts/get_maintainer.pl --no-m $f
        done | sort -u
    else
        scripts/get_maintainer.pl $1
    fi
}

function bsendpatch () {
  patch=$1
  shift
  git send-email --cc-cmd=cocci_cc $@ $patch
}

function bsendpatchset () {
  patchfolder=$1
  shift
  patchset=$(ls -1 $patchfolder)

  for patch in $patchset; do
    bsendpatch $patchfolder/$patch $@
  done
}

# ========================================================= #
# A bunch of expert command
# ========================================================= #

##################
# Git commands
#
# git log style of hisotry with commit-date, committer name, digest & subject
# $ git log --pretty=format:"%cd %cn %h: %s" --graph'

##################
# Gerrit commands
#
# To automatically add reviewer to gerrit system
# $ git push origin HEAD:refs/for/master%r=xyz@somecorp.com,r=abc@somecorp.com,r=def@somecorp.com'

##################
# Jenkins commands
#
# Control Jenkins server during run-time
# $ sudo service jenkins [start | stop | restart | status]
#
# Enable/Disable Jenkins service during start-up
# $ sudo systemctl [enable | disable jenkins]

################
# putty command
#
# $ sudo putty -fn "FreeMono 16" -serial -sercfg 115200,8,n,1 /dev/ttyUSB0

#################
# strace commands
#
# $ strace -xx -e verbose=%network COMMAND
#   e.g. strace -xx -e verbose=%network tc action show action simple

